name: Обновить release

on:
  workflow_dispatch:
    branches:
      - 'release/**'
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '37'

jobs:
  lint_and_test:
    uses: ./.github/workflows/lint_and_test.yml

  upload_docker_image_to_registry:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - name: Подгружаем код репозитория
        uses: actions/checkout@v4
        
      - name: Собираем Docker-образ с двумя тегами ( [release_version]_fix[fix_version] )
        id: build
        run: |
          docker build -t cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ inputs.version }}_fix${{ github.run_number }} .
          docker tag cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ inputs.version }}_fix${{ github.run_number }} cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ inputs.version }}_latest
  
      - name: Аутентификация в Yandex Registry
        run: echo "${{ secrets.AUTH_REGISTRY_TOKEN }}" | docker login cr.yandex --username oauth --password-stdin
      
      - name: Переносим Docker-образ в Container Registry
        run: |
          docker push cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ inputs.version }}_fix${{ github.run_number }}
          docker push cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ inputs.version }}_latest

  add_tag_for_fix:
    runs-on: ubuntu-latest
    needs: upload_docker_image_to_registry
    steps:
      - name: Подгружаем код репозитория
        uses: actions/checkout@v4

      - name: Записываем git-пользователя
        uses: ./.github/actions/set_user_git

      - name: создаёт тег с номером текущего релиза + пометкой `fix` и номером фикса
        run: |
          git tag -a "${{ inputs.version }}_fix${{ github.run_number }}" -m "Fix release for version ${{ inputs.version }}"
          git push origin "${{ inputs.version }}_fix${{ github.run_number }}"

  get_data_for_comment_issue:
    runs-on: ubuntu-latest
    needs: add_tag_for_fix
    steps:
      - name: Подгружаем код репозитория
        uses: actions/checkout@v4

      - name: Записываем git-пользователя
        uses: ./.github/actions/set_user_git

      - name: Получить тег
        id: get_previous_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

      - name: Получить список предыдущих коммитов
        id: commits
        run: |
          PREVIOUS_TAG=${{ steps.get_previous_tag.outputs.tag }}
          COMMITS=$(git log $PREVIOUS_TAG..HEAD --oneline)
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Получить текущую дату
        id: date
        run: echo "date=$(date -u)" >> $GITHUB_ENV

  add_comment_release_issue:
    runs-on: ubuntu-latest
    needs: get_data_for_comment_issue
    steps:
      - name: Подгружаем код репозитория
        uses: actions/checkout@v4

      - name: Подготовка окружения Node.js
        uses: ./.github/actions/setup

      - name: Добавить комментарий к issue релиза
        run: node .github/actions/scripts/add-comment-issue.js
        env:
          token: ${{ secrets.ACCESS_TOKEN_GITHUB }}
          date: ${{ env.date }}
          author: ${{ github.actor }}
          version: ${{ inputs.version }}
          commits: ${{ env.commits }}
          fix_number: ${{ github.run_number }}
          id_registry: ${{ secrets.ID_REGISTRY }}
