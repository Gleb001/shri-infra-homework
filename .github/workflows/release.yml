name: Release

on:
  workflow_dispatch:
    branches:
      - main

jobs:
  lint_and_test:
    uses: ./.github/workflows/lint_and_test.yml

  release:
    runs-on: ubuntu-latest
    needs: lint_and_test
    if: ${{ needs.lint_and_test.result == 'success' }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "default@gmail.com"

    - name: отводит от `main` релизуню ветку `releases/<версия_релиза>`
      run: |
        git checkout main
        git pull origin main
        git checkout -b "releases/${{ github.run_number }}"
        git push origin "releases/${{ github.run_number }}"

    - name: собирает docker-образ с двумя тегами
      run: |
        docker build -t cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ github.run_number }} .
        docker tag cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ github.run_number }} cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ github.run_number }}_latest

    - name: аутентификация в Yandex Registry
      run: echo "${{ secrets.AUTH_REGISTRY_TOKEN }}" | docker login cr.yandex --username oauth --password-stdin

    - name: загружает docker-образ в Container Registry 
      run: |
        docker push cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ github.run_number }}
        docker push cr.yandex/${{ secrets.ID_REGISTRY }}/app:${{ github.run_number }}_latest

    - name: создаёт тег, с номером текущей версии, который указывает на последний коммит в главной ветке
      run: |
        git tag -a "v${{ github.run_number }}" -m "Release version ${{ github.run_number }}"
        git push origin "v${{ github.run_number }}"

    - name: получить текущую дату
      id: date
      run: echo "date=$(date -u)" >> $GITHUB_ENV

    - name: получить тег предыдущего релиза
      id: get_latest_tag
      run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

    - name: получить список коммитов от предыдущего релизного
      id: commits
      run: echo "commits=$(git log ${{ steps.get_latest_tag.outputs.tag }}..HEAD --oneline)" >> $GITHUB_ENV

    - name: создание Issue, которое содержит всю важную информацию
      run: node .github/actions/create-issue.js
      env:
        token: ${{ secrets.ACCESS_TOKEN_GITHUB }}
        date: ${{ env.date }}
        author: ${{ github.actor }}
        version: ${{ github.run_number }}
        commits: ${{ env.commits }}
        id_registry: ${{ secrets.ID_REGISTRY }}
        